// <auto-generated />
using System;
using Arch.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Arch.Infra.Data.Migrations
{
    [DbContext(typeof(ArchContext))]
    [Migration("20190729013043_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Arch.Domain.Account.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Arch.Domain.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DistribuitorId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DistribuitorId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Arch.Domain.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Email");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Arch.Domain.Distribuitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Distribuitors");
                });

            modelBuilder.Entity("Arch.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Arch.Domain.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("OrderId");

                    b.Property<Guid?>("ProductId");

                    b.Property<double>("Qtd");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Arch.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BrandId");

                    b.Property<Guid?>("CustomerId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Arch.Domain.Brand", b =>
                {
                    b.HasOne("Arch.Domain.Distribuitor", "Distribuitor")
                        .WithMany()
                        .HasForeignKey("DistribuitorId");
                });

            modelBuilder.Entity("Arch.Domain.Customer", b =>
                {
                    b.OwnsOne("Arch.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CustomerId");

                            b1.Property<string>("City")
                                .HasColumnName("City")
                                .HasMaxLength(80);

                            b1.Property<string>("Number")
                                .HasColumnName("Number")
                                .HasMaxLength(20);

                            b1.Property<string>("Street")
                                .HasColumnName("Street")
                                .HasMaxLength(120);

                            b1.Property<string>("ZipCode")
                                .HasColumnName("ZipCode")
                                .HasMaxLength(20);

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.HasOne("Arch.Domain.Customer")
                                .WithOne("Address")
                                .HasForeignKey("Arch.Domain.ValueObjects.Address", "CustomerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Arch.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("CustomerId");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnName("FirstName")
                                .HasMaxLength(60);

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnName("LastName")
                                .HasMaxLength(80);

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.HasOne("Arch.Domain.Customer")
                                .WithOne("Name")
                                .HasForeignKey("Arch.Domain.ValueObjects.Name", "CustomerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Arch.Domain.OrderItem", b =>
                {
                    b.HasOne("Arch.Domain.Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("Arch.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Arch.Domain.Product", b =>
                {
                    b.HasOne("Arch.Domain.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("Arch.Domain.Customer")
                        .WithMany("Products")
                        .HasForeignKey("CustomerId");

                    b.OwnsOne("Arch.Domain.ValueObjects.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("ProductId");

                            b1.Property<decimal>("Normal");

                            b1.Property<DateTime?>("PromotionInit");

                            b1.Property<DateTime?>("PromotionLimit");

                            b1.Property<decimal>("Promotional");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.HasOne("Arch.Domain.Product")
                                .WithOne("Price")
                                .HasForeignKey("Arch.Domain.ValueObjects.Price", "ProductId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
